#!/usr/bin/env python


import numpy as np
import pandas as pd

import keras

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers.core import Dense, Activation, Dropout
import tensorflow as tf
import os



prefix = '/opt/ml/'
input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')


# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

input_files = [ os.path.join(training_path, file) for file in os.listdir(training_path) ]
dataset = [ pd.read_csv(file) for file in input_files ]
dataset = pd.concat(dataset)


             
values_train = dataset[['0', '1']].values
train_data = values_train.astype('float32')
X, y = train_data[:, 0:1], train_data[:, 1:]
X = X.reshape(X.shape[0], 1, X.shape[1])

# fit an LSTM network to training data
def train():
    # design network
    model = Sequential()
    model.add(LSTM(30, input_shape=(X.shape[1], X.shape[2]),kernel_initializer='random_normal', return_sequences=True))
    model.add(LSTM(10, return_sequences=False))
    model.add(Dense(y.shape[1]))
    opt = keras.optimizers.Adam(lr=0.004265)
    model.compile(loss='mean_squared_error', optimizer=opt)
    # fit network
    model.fit(X, y, epochs=200, batch_size=10, verbose=0, shuffle=False)        
    model.save('/opt/ml/model/meter831001_01.h5')

    return model
    

train()

if __name__ == '__main__':
    train()




